const { tgBotLogger } = require('./logger');

//telegram bot
const TelegramBot = require('node-telegram-bot-api');
const token = '6041726880:AAFwmy2N7zaF5G9_JnaofZvVH3OwVZXecaE';
const bot = new TelegramBot(token, { polling: true });



//Spectate

// –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /spectate


// // —Å—Ç—ñ–∫–µ—Ä
// const getStickerId = async (stickerSetName) => {
//   try {
//     const response = await bot.getStickerSet(stickerSetName);
//     const stickers = response.stickers;
//     if (stickers && stickers.length > 0) {
//       const stickerId = stickers[0].file_id;
//       return stickerId;
//     } else {
//       console.log('–°—Ç—ñ–∫–µ—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
//       return null;
//     }
//   } catch (err) {
//     console.log('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç—ñ–∫–µ—Ä–∞', err);
//     return null;
//   }
// };

// // –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ —Å—Ç—ñ–∫–µ—Ä–∞
// const getStickerIdAndPrint = async () => {
//   const stickerSetName = 'Erdoganishe';
//   const stickerId = await getStickerId(stickerSetName);
//   console.log('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Å—Ç—ñ–∫–µ—Ä–∞:', stickerId);
// };

// –í–∏–∫–ª–∏–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
//getStickerIdAndPrint();

// //–∞–≤–∞—Ç–∞—Ä !!!!!!!!!!!!!!!!–Ω–µ –ø—Ä–∞—Ü—é—î
// const imagePath = path.join(__dirname,'public', 'img', 'avatars', 'tg_avatar.png');

// // –ó—á–∏—Ç—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ base64
// const imageBase64 = fs.readFileSync(imagePath, { encoding: 'base64' });

// // –í–∏–∫–ª–∏–∫–∞—î–º–æ Telegram Bot API –¥–ª—è –∑–º—ñ–Ω–∏ –∞–≤–∞—Ç–∞—Ä–∞ –±–æ—Ç–∞
// bot.setChatPhoto(imageBase64).then((res) => {
//   console.log('–ê–≤–∞—Ç–∞—Ä –±–æ—Ç–∞ –∑–º—ñ–Ω–µ–Ω–æ');
// }).catch((err) => {
//   console.log('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∞–≤–∞—Ç–∞—Ä–∞ –±–æ—Ç–∞', err);
// });
// –ü–∏–∑–¥—É–π —Å–ø–∞—Ç–∏
// –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
// –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å


const botOn = () => bot.on('message', (message) => {
    const chatId = message.chat.id;

    if (message.text) {
        const messageText = message.text;

        // –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /help –∞–±–æ /commands
        if (messageText.startsWith('/help') || messageText.startsWith('/commands')) {
            if (messageText === '/help' || messageText === '/commands') {
                const commandList = [
                    '/spectate - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ —ñ–≥—Ä–∏',
                    '/main - –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç'
                    // –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
                ];
                const gifPath = path.join(__dirname, 'public', 'img', 'gif4.mp4');

                // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ GIF-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
                bot.sendDocument(chatId, gifPath)
                    .then(() => {
                        tgBotLogger('GIF-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ', chatId);
                    })
                    .catch((err) => {
                        console.log('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ GIF-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è', err);
                    });

                const commandListText = commandList.join('\n');
                bot.sendMessage(chatId, commandListText)
                    .then(() => {
                        tgBotLogger('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ', chatId);
                    })
                    .catch((err) => {
                        console.log('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥', err);
                    });
            }
        } else {
            // –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
            if (messageText.startsWith('/start')) {
                const gifPath = path.join(__dirname, 'public', 'img', 'gif2.mp4');

                // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ GIF-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
                bot.sendDocument(chatId, gifPath)
                    .then(() => {
                        tgBotLogger('GIF-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ', chatId);
                    })
                    .catch((err) => {
                        console.log('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ GIF-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è', err);
                    });

                const response = '–í—ñ—Ç–∞—é! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–º–∞–Ω–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help –∞–±–æ /commands.';
                bot.sendMessage(chatId, response);
            } else if (messageText.startsWith('/spectate')) {
                // –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /spectate
                const activeGames = 2; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö —ñ–≥–æ—Ä (–ø—Ä–∏–∫–ª–∞–¥)

                if (activeGames === 0) {
                    bot.sendMessage(chatId, '–ê–∫—Ç–∏–≤–Ω–∏—Ö —ñ–≥–æ—Ä –Ω–µ–º–∞—î, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ');
                } else {
                    const gameMessages = [];
                    for (let i = 0; i < activeGames; i++) {
                        const gameId = i + 1;
                        const gameMessage = `–ù–∞—Ä–∞–∑—ñ –∞–∫—Ç–∏–≤–Ω–∞ –≥—Ä–∞ ${gameId}`;
                        gameMessages.push(gameMessage);
                    }

                    const gifPath = path.join(__dirname, 'public', 'img', 'gif3.mp4');

                    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ GIF-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
                    bot.sendDocument(chatId, gifPath)
                        .then(() => {
                            tgBotLogger('GIF-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ', chatId);
                        })
                        .catch((err) => {
                            console.log('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ GIF-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è', err);
                        });

                    const sendMessagePromises = gameMessages.map((gameMessage) =>
                        bot.sendMessage(chatId, gameMessage, {
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        {
                                            text: '–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è',
                                            callback_data: 'get_link',
                                        },
                                        {
                                            text: 'üëç',
                                            callback_data: 'rate_up',
                                        },
                                        {
                                            text: 'üëé',
                                            callback_data: 'rate_down',
                                        },
                                    ],
                                ],
                            },
                        })
                    );

                    Promise.all(sendMessagePromises)
                        .then((sentMessages) => {
                            sentMessages.forEach((message) => {
                                const messageId = message.message_id;
                                bot.on('callback_query', (callbackQuery) => {
                                    const data = callbackQuery.data;
                                    if (data === 'get_link') {
                                        const gameId = message.text.match(/–∞–∫—Ç–∏–≤–Ω–∞ –≥—Ä–∞ (\d+)/)[1];
                                        const link = `http://localhost:3000/game?${gameId}`;
                                        bot.answerCallbackQuery(callbackQuery.id, link);
                                    } else if (data === 'rate_up' || data === 'rate_down') {
                                        // –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏ –≥—Ä–∏
                                        // –í–∞—à–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏ –≥—Ä–∏
                                        bot.answerCallbackQuery(callbackQuery.id, '–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—É –æ—Ü—ñ–Ω–∫—É!');
                                    }
                                });
                            });
                        })
                        .catch((err) => {
                            console.log('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ —ñ–≥—Ä–∏', err);
                        });
                }
            } else if (messageText.startsWith('/main')) {
                // –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /main
                const gifPath = path.join(__dirname, 'public', 'img', 'gif5.mp4');

                // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ GIF-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
                bot.sendDocument(chatId, gifPath)
                    .then(() => {
                        tgBotLogger('GIF-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ', chatId);
                    })
                    .catch((err) => {
                        console.log('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ GIF-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è', err);
                    });

                const response = '–ó–≤–∏—á–∞–π–Ω–æ, –æ—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞—à —Å–∞–π—Ç: [chess-arena.com](https://chess-arena.com)';
                bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
            } else {
                // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å—Ç—ñ–∫–µ—Ä —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                bot.sendSticker(chatId, 'CAACAgIAAxUAAWRpw0rTHtPrD1Lph43vVIWKHso5AAK4HQACw5hRS486FBTmugxlLwQ')
                    .then(() => {
                        tgBotLogger('–°—Ç—ñ–∫–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ', chatId);
                    })
                    .catch((err) => {
                        console.log('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ —Å—Ç—ñ–∫–µ—Ä–∞', err);
                    });
            }
        }
    }
});

module.exports = botOn;